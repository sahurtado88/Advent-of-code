def count_xmas(grid):
    rows = len(grid)
    cols = len(grid[0])
    xmas_count = 0

    # Function to check if a MAS exists in a given direction
    def is_mas(row, col, dr, dc):
        return (0 <= row + 2 * dr < rows and
                0 <= col + 2 * dc < cols and
                grid[row][col] == 'M' and
                grid[row + dr][col + dc] == 'A' and
                grid[row + 2 * dr][col + 2 * dc] == 'S')

    # Search for X-MAS patterns
    for row in range(rows):
        for col in range(cols):
            if grid[row][col] != 'M':
                continue  # Skip cells that cannot be the start of a MAS

            # Check for two intersecting MAS forming an X
            if (is_mas(row, col, 1, 1) and is_mas(row, col, 1, -1) or
                is_mas(row, col, -1, -1) and is_mas(row, col, -1, 1)):
                xmas_count += 1

    return xmas_count


# Example grid input
grid = [
    ".M.S......",
    "..A..MSMS.",
    ".M.S.MAA..",
    "..A.ASMSM.",
    ".M.S.M....",
    "..........",
    "S.S.S.S.S.",
    ".A.A.A.A..",
    "M.M.M.M.M.",
    ".........."
]

# Clean up grid to remove irrelevant characters
processed_grid = [[ch if ch in "MAS" else '.' for ch in row] for row in grid]

# Count the number of X-MASes
result = count_xmas(processed_grid)
print(f"Number of X-MAS patterns: {result}")
